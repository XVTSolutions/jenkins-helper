// This Jenkinsfile is for building a generic dotnetcore project with sonar scan
// If there is a folder `tools/Minicover` then it will try to restore and do the
// instrumentation coverage as well

// Status: Working but requires changes in the original repo as we do not build
// using user root some permissions is not granted.
// Not in use for now

pipeline {
    agent { label 'dotnetcore-docker' }
    stages {
        stage('Load jenkins-helper') {
            steps {
                script {
                    def scmVars = checkout([$class: 'GitSCM', branches: [[name: "*/${PROJECT_GIT_BRANCH}"]], doGenerateSubmoduleConfigurations: true, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "PROJECT_SOURCE"], [$class: 'CloneOption', noTags: true, reference: '', shallow: true]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'xvt-product-registration1', url: "${PROJECT_GIT_URL}"]]])

                    dir('PROJECT_SOURCE/') {
                        env.GIT_REVISION = sh(returnStdout: true, script: """##@echo off
                        git rev-parse --short HEAD"""
                        ).trim()
                    }

                    env.BRANCH_NAME = scmVars.GIT_BRANCH.replace('origin/','')
                    BUILD_VERSION_PREFIX = "${BRANCH_NAME}-${GIT_REVISION}-".replace('/', '-')
                    env.BUILD_VERSION = VersionNumber projectStartDate: '2018-11-07', versionNumberString: "${BUILD_NUMBER}", versionPrefix: "${BUILD_VERSION_PREFIX}", worstResultForIncrement: 'SUCCESS'

                    echo "Version:  $BUILD_VERSION"
                    echo "Revision: $GIT_REVISION"

                    //checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: true, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'jenkins-helper'], [$class: 'CloneOption', noTags: true, reference: '', shallow: true]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'xvt-product-registration1', url: 'git@github.com:XVTSolutions/jenkins-helper.git']]])
                    utils = load("${WORKSPACE}/jenkins-helper/deployment.groovy")
                }//script
            }//steps
        }//stage

        stage('Generating Deploy Scripts') {
            steps {
                script {
                    dir('PROJECT_SOURCE') {
                    utils.generate_add_user_script()
                    //env.SONAR_PROJECT = "commonwealth-errcd"
                    withCredentials([usernamePassword(credentialsId: 'sonar_login', passwordVariable: 'SONAR_TOKEN', usernameVariable: 'SONAR_URL')]) {
                    sh '''cat <<EOF > build.sh
#!/bin/bash -xe

WORK_DIR=\\$(pwd)

if [ -d "tools/Minicover" ]; then
    echo "Restore Minicover.cproj"
    cd tools/Minicover/
    dotnet restore Minicover.csproj
else
    echo "tools/Minicover does not exist, skiping restore Minicover"
fi

cd \\${WORK_DIR}

echo "Restore nuget.config"
dotnet restore --configfile "nuget.config"

# Build/Publish with restore (in case the cache isn't complete)

echo "Start sonar scanner"
dotnet sonarscanner begin \
        /k:"${SONAR_PROJECT}" \
        /n:"${SONAR_PROJECT}" \
        /v:"${BUILD_VERSION}" \
        /d:sonar.host.url="${SONAR_URL}" \
        /d:sonar.login="${SONAR_TOKEN}" \
        /d:sonar.cs.opencover.reportsPaths="test/opencovercoverage.xml" \
        /d:sonar.coverage.exclusions="test/**/*"

echo "dotnet build --no-restore"
dotnet build --no-restore

echo "Start instrumentation"
if [ -d "tools/Minicover" ]; then
    cd tools/Minicover/
    dotnet restore Minicover.csproj
    dotnet minicover instrument --workdir \\${WORK_DIR} --assemblies test/**/*.dll --sources src/**/*.cs
    dotnet minicover reset
else
    echo "tools/Minicover does not exist, skiping instrumentation"
fi

cd \\${WORK_DIR}

echo "Run each of the test projects and save the results"
for csproj in ./test/**/*.csproj; \
    do \
        trx=$(basename \\$csproj); \
        dotnet test \
            --no-build \
            --logger "trx;LogFileName=test/\\$trx.trx" \
            \\$csproj; \
        exit_status=\\$?; \
        if [ ! \\$exit_status -eq 0 ]; \
        then \
            exit \\$exit_status; \
        fi; \
done

echo "Uninstrument and generate reports"
if [ -d "tools/Minicover" ]; then
    cd tools/Minicover
    dotnet minicover uninstrument --workdir /src
    dotnet minicover report --workdir \\${WORK_DIR} --threshold 0 || true
    dotnet minicover opencoverreport --workdir \\${WORK_DIR} --threshold 0 || true

    # Copy the Coverage results to the /test folder
    mkdir -p \\${WORK_DIR}/test
    cp *coverage.* \\${WORK_DIR}/test/
else
    echo "tools/Minicover does not exist, skiping uninstrument and generate reports"
fi

echo "sonar scan end"
dotnet sonarscanner end \
        /d:sonar.login="${SONAR_TOKEN}"

EOF
'''
                    }
                    sh 'chmod +x build.sh'
                    sh 'cat build.sh'
                    }//dir('PROJECT_SOURCE')
                }//script
            }//steps
        }//stage

        stage('Run the generated scripts within the docker environment') {
            steps {
                script {
                    dir('PROJECT_SOURCE') {
                        utils.run_build_script(['docker_image': 'xvtsolutions/dotnet-sdk-sonar-scanner:2.1.603',
                        'docker_net_opt': '',
                        'docker_volume_opt': "-v ${WORKSPACE}/PROJECT_SOURCE:${WORKSPACE}/PROJECT_SOURCE"])
                    }//dir
                } //script
            } // step
        } // stage
    } // stages
    post {
        always {
            script {
                utils.apply_maintenance_policy_per_branch()
                currentBuild.description = """REVISION: ${GIT_REVISION}<br/>
"""
            }
        }
        success {
            script {
              echo 'Success!'
            }
        }
        failure {
            echo "Failure"
        }
        cleanup {
          script {
            sh "rm -f ${BUILD_TAG}.log"
          }//script
        }//cleanup
    }
} // pipeline